#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Ìà¨Ïûê Í±∞Ïû• Ï†ÑÎûµ Î™®Îìà
6ÎåÄ Ìà¨Ïûê Ï≤†Ìïô Í∏∞Î∞ò Ï¢ÖÎ™© ÌèâÍ∞Ä ÏãúÏä§ÌÖú
"""

from dataclasses import dataclass
from typing import Dict, List, Optional
import logging

logger = logging.getLogger(__name__)


@dataclass
class Stock:
    """Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§"""
    code: str
    name: str
    current_price: float
    market_cap: float = 0
    per: float = 0
    pbr: float = 0
    roe: float = 0
    roa: float = 0
    debt_ratio: float = 0
    current_ratio: float = 0
    operating_margin: float = 0
    net_margin: float = 0
    revenue_growth: float = 0
    profit_growth: float = 0
    dividend_yield: float = 0
    foreign_rate: float = 0
    sector: str = ''
    last_update: str = ''


@dataclass
class InvestmentScore:
    """Ìà¨Ïûê Ï†êÏàò Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§"""
    total_score: float
    grade: str
    recommendation: str
    details: Dict[str, float]


class InvestmentStrategy:
    """Ìà¨Ïûê Ï†ÑÎûµ Í∏∞Î≥∏ ÌÅ¥ÎûòÏä§"""
    
    def __init__(self, name: str, description: str, icon: str):
        self.name = name
        self.description = description
        self.icon = icon
    
    def calculate_score(self, stock: Stock) -> InvestmentScore:
        """Ï£ºÏãùÏóê ÎåÄÌïú Ìà¨Ïûê Ï†êÏàò Í≥ÑÏÇ∞ (ÌïòÏúÑ ÌÅ¥ÎûòÏä§ÏóêÏÑú Íµ¨ÌòÑ)"""
        raise NotImplementedError
    
    def get_grade(self, score: float) -> str:
        """Ï†êÏàòÎ•º Í∏∞Î∞òÏúºÎ°ú Îì±Í∏â Í≤∞Ï†ï"""
        if score >= 8.0: return 'S'
        elif score >= 7.0: return 'A'
        elif score >= 6.0: return 'B'
        elif score >= 5.0: return 'C'
        else: return 'D'
    
    def get_recommendation(self, grade: str, stock: Stock) -> str:
        """Îì±Í∏âÍ≥º Î∞∏Î•òÏóêÏù¥ÏÖòÏùÑ Í∏∞Î∞òÏúºÎ°ú Ìà¨Ïûê Ï∂îÏ≤ú"""
        if grade == 'S':
            if stock.per > 0 and stock.per <= 15 and stock.pbr <= 2:
                return 'Ï†ÅÍ∑πÎß§Ïàò'
            else:
                return 'Îß§Ïàò'
        elif grade == 'A':
            if stock.per > 0 and stock.per <= 20 and stock.pbr <= 3:
                return 'Îß§Ïàò'
            else:
                return 'Î≥¥Ïú†'
        elif grade == 'B':
            return 'Î≥¥Ïú†'
        elif grade == 'C':
            return 'Í¥ÄÏã¨'
        else:
            return 'ÌöåÌîº'


class BuffettStrategy(InvestmentStrategy):
    """ÏõåÎ†å Î≤ÑÌïè Í∞ÄÏπòÌà¨Ïûê Ï†ÑÎûµ"""
    
    def __init__(self):
        super().__init__(
            name="ÏõåÎ†å Î≤ÑÌïè",
            description="Í≤ΩÏ†úÏ†Å Ìï¥Ïûê + Îõ∞Ïñ¥ÎÇú Í≤ΩÏòÅÏßÑ + Ïû¨Î¨¥Í±¥Ï†ÑÏÑ± + Ìï©Î¶¨Ï†Å Í∞ÄÍ≤©",
            icon="üëë"
        )
    
    def calculate_score(self, stock: Stock) -> InvestmentScore:
        scores = {}
        
        # 1. Í≤ΩÏ†úÏ†Å Ìï¥Ïûê (ROE Í∏∞Î∞ò) - 3Ï†ê
        if stock.roe >= 20:
            scores['moat'] = 3.0
        elif stock.roe >= 15:
            scores['moat'] = 2.5
        elif stock.roe >= 10:
            scores['moat'] = 2.0
        elif stock.roe >= 8:
            scores['moat'] = 1.5
        else:
            scores['moat'] = 1.0
        
        # 2. Ïû¨Î¨¥Í±¥Ï†ÑÏÑ± (Î∂ÄÏ±ÑÎπÑÏú®) - 2Ï†ê
        if stock.debt_ratio <= 30:
            scores['financial_health'] = 2.0
        elif stock.debt_ratio <= 50:
            scores['financial_health'] = 1.5
        elif stock.debt_ratio <= 70:
            scores['financial_health'] = 1.0
        else:
            scores['financial_health'] = 0.5
        
        # 3. ÏàòÏùµÏÑ± (ÏòÅÏóÖÏù¥ÏùµÎ•†) - 2Ï†ê
        if stock.operating_margin >= 20:
            scores['profitability'] = 2.0
        elif stock.operating_margin >= 15:
            scores['profitability'] = 1.5
        elif stock.operating_margin >= 10:
            scores['profitability'] = 1.0
        else:
            scores['profitability'] = 0.5
        
        # 4. Î∞∏Î•òÏóêÏù¥ÏÖò (PER, PBR) - 3Ï†ê
        valuation_score = 0
        if stock.per > 0:
            if stock.per <= 10:
                valuation_score += 1.5
            elif stock.per <= 15:
                valuation_score += 1.0
            elif stock.per <= 20:
                valuation_score += 0.5
        
        if stock.pbr > 0:
            if stock.pbr <= 1.0:
                valuation_score += 1.5
            elif stock.pbr <= 1.5:
                valuation_score += 1.0
            elif stock.pbr <= 2.0:
                valuation_score += 0.5
        
        scores['valuation'] = valuation_score
        
        total_score = sum(scores.values())
        grade = self.get_grade(total_score)
        recommendation = self.get_recommendation(grade, stock)
        
        return InvestmentScore(
            total_score=round(total_score, 2),
            grade=grade,
            recommendation=recommendation,
            details=scores
        )


class LynchStrategy(InvestmentStrategy):
    """ÌîºÌÑ∞ Î¶∞Ïπò ÏÑ±Ïû•Ìà¨Ïûê Ï†ÑÎûµ"""
    
    def __init__(self):
        super().__init__(
            name="ÌîºÌÑ∞ Î¶∞Ïπò",
            description="PEG ÎπÑÏú® + Îß§Ï∂úÏÑ±Ïû•Î•† + ÏàòÏùµÏÑ±Ïû•Î•†",
            icon="üöÄ"
        )
    
    def calculate_score(self, stock: Stock) -> InvestmentScore:
        scores = {}
        
        # 1. PEG ÎπÑÏú® (PER/ÏÑ±Ïû•Î•†) - 4Ï†ê
        if stock.per > 0 and stock.profit_growth > 0:
            peg = stock.per / stock.profit_growth
            if peg <= 0.5:
                scores['peg'] = 4.0
            elif peg <= 1.0:
                scores['peg'] = 3.0
            elif peg <= 1.5:
                scores['peg'] = 2.0
            elif peg <= 2.0:
                scores['peg'] = 1.0
            else:
                scores['peg'] = 0.5
        else:
            scores['peg'] = 1.0
        
        # 2. ÏÑ±Ïû•ÏÑ± - 3Ï†ê
        growth_avg = (stock.revenue_growth + stock.profit_growth) / 2
        if growth_avg >= 20:
            scores['growth'] = 3.0
        elif growth_avg >= 15:
            scores['growth'] = 2.5
        elif growth_avg >= 10:
            scores['growth'] = 2.0
        elif growth_avg >= 5:
            scores['growth'] = 1.5
        else:
            scores['growth'] = 1.0
        
        # 3. ÏàòÏùµÏÑ± (ROE) - 3Ï†ê
        if stock.roe >= 20:
            scores['profitability'] = 3.0
        elif stock.roe >= 15:
            scores['profitability'] = 2.5
        elif stock.roe >= 10:
            scores['profitability'] = 2.0
        else:
            scores['profitability'] = 1.0
        
        total_score = sum(scores.values())
        grade = self.get_grade(total_score)
        recommendation = self.get_recommendation(grade, stock)
        
        return InvestmentScore(
            total_score=round(total_score, 2),
            grade=grade,
            recommendation=recommendation,
            details=scores
        )


class GrahamStrategy(InvestmentStrategy):
    """Î≤§Ï†ÄÎØº Í∑∏Î†àÏù¥ÏóÑ Îî•Î∞∏Î•ò Ï†ÑÎûµ"""
    
    def __init__(self):
        super().__init__(
            name="Î≤§Ï†ÄÎØº Í∑∏Î†àÏù¥ÏóÑ",
            description="Ï†ÄÌèâÍ∞Ä + ÏïàÏ†ÑÎßàÏßÑ + Ïû¨Î¨¥ÏïàÏ†ïÏÑ±",
            icon="üìö"
        )
    
    def calculate_score(self, stock: Stock) -> InvestmentScore:
        scores = {}
        
        # 1. Ï†ÄÌèâÍ∞Ä (PER, PBR) - 4Ï†ê
        valuation_score = 0
        if stock.per > 0:
            if stock.per <= 10:
                valuation_score += 2.0
            elif stock.per <= 15:
                valuation_score += 1.5
            elif stock.per <= 20:
                valuation_score += 1.0
            else:
                valuation_score += 0.5
        
        if stock.pbr > 0:
            if stock.pbr <= 1.0:
                valuation_score += 2.0
            elif stock.pbr <= 1.5:
                valuation_score += 1.5
            elif stock.pbr <= 2.0:
                valuation_score += 1.0
            else:
                valuation_score += 0.5
        
        scores['valuation'] = valuation_score
        
        # 2. Ïû¨Î¨¥ÏïàÏ†ïÏÑ± - 3Ï†ê
        if stock.current_ratio >= 200:
            scores['financial_stability'] = 3.0
        elif stock.current_ratio >= 150:
            scores['financial_stability'] = 2.5
        elif stock.current_ratio >= 100:
            scores['financial_stability'] = 2.0
        else:
            scores['financial_stability'] = 1.0
        
        # 3. ÏàòÏùµÏÑ± - 3Ï†ê
        if stock.roe >= 10 and stock.net_margin >= 5:
            scores['profitability'] = 3.0
        elif stock.roe >= 8 and stock.net_margin >= 3:
            scores['profitability'] = 2.0
        else:
            scores['profitability'] = 1.0
        
        total_score = sum(scores.values())
        grade = self.get_grade(total_score)
        recommendation = self.get_recommendation(grade, stock)
        
        return InvestmentScore(
            total_score=round(total_score, 2),
            grade=grade,
            recommendation=recommendation,
            details=scores
        )


class FisherStrategy(InvestmentStrategy):
    """ÌïÑÎ¶Ω ÌîºÏÖî ÏÑ±Ïû•Í∞ÄÏπò Ï†ÑÎûµ"""
    
    def __init__(self):
        super().__init__(
            name="ÌïÑÎ¶Ω ÌîºÏÖî",
            description="ÌòÅÏã†ÏÑ± + Ïû•Í∏∞ÏÑ±Ïû• + Í≤ΩÏòÅÏßÑ Îä•Î†•",
            icon="üî¨"
        )
    
    def calculate_score(self, stock: Stock) -> InvestmentScore:
        scores = {}
        
        # 1. ÌòÅÏã†ÏÑ± (ÏòÅÏóÖÏù¥ÏùµÎ•†) - 3Ï†ê
        if stock.operating_margin >= 25:
            scores['innovation'] = 3.0
        elif stock.operating_margin >= 20:
            scores['innovation'] = 2.5
        elif stock.operating_margin >= 15:
            scores['innovation'] = 2.0
        else:
            scores['innovation'] = 1.0
        
        # 2. ÏÑ±Ïû• Ïû†Ïû¨Î†• - 4Ï†ê
        growth_score = 0
        if stock.revenue_growth >= 15:
            growth_score += 2.0
        elif stock.revenue_growth >= 10:
            growth_score += 1.5
        else:
            growth_score += 1.0
        
        if stock.profit_growth >= 15:
            growth_score += 2.0
        elif stock.profit_growth >= 10:
            growth_score += 1.5
        else:
            growth_score += 1.0
        
        scores['growth'] = growth_score
        
        # 3. Í≤ΩÏòÅÏßÑ Îä•Î†• (ROE) - 3Ï†ê
        if stock.roe >= 20:
            scores['management'] = 3.0
        elif stock.roe >= 15:
            scores['management'] = 2.5
        elif stock.roe >= 12:
            scores['management'] = 2.0
        else:
            scores['management'] = 1.0
        
        total_score = sum(scores.values())
        grade = self.get_grade(total_score)
        recommendation = self.get_recommendation(grade, stock)
        
        return InvestmentScore(
            total_score=round(total_score, 2),
            grade=grade,
            recommendation=recommendation,
            details=scores
        )


class MungerStrategy(InvestmentStrategy):
    """Ï∞∞Î¶¨ Î©çÍ±∞ Ïö∞ÎüâÍ∏∞ÏóÖ Ï†ÑÎûµ"""
    
    def __init__(self):
        super().__init__(
            name="Ï∞∞Î¶¨ Î©çÍ±∞",
            description="Îã®ÏàúÌïú ÎπÑÏ¶àÎãàÏä§ + Í≤ΩÏüÅÏö∞ÏúÑ + Ìï©Î¶¨Ï†Å Í∞ÄÍ≤©",
            icon="üéØ"
        )
    
    def calculate_score(self, stock: Stock) -> InvestmentScore:
        scores = {}
        
        # 1. ÎπÑÏ¶àÎãàÏä§ ÌíàÏßà (ROE, ÎßàÏßÑ) - 4Ï†ê
        quality_score = 0
        if stock.roe >= 15:
            quality_score += 2.0
        elif stock.roe >= 12:
            quality_score += 1.5
        else:
            quality_score += 1.0
        
        if stock.operating_margin >= 15:
            quality_score += 2.0
        elif stock.operating_margin >= 10:
            quality_score += 1.5
        else:
            quality_score += 1.0
        
        scores['business_quality'] = quality_score
        
        # 2. Í≤ΩÏüÅÏö∞ÏúÑ (ÏãúÏû•ÏßÄÎ∞∞Î†•) - 3Ï†ê
        if stock.market_cap >= 10000000:  # 10Ï°∞Ïõê Ïù¥ÏÉÅ
            scores['competitive_advantage'] = 3.0
        elif stock.market_cap >= 5000000:  # 5Ï°∞Ïõê Ïù¥ÏÉÅ
            scores['competitive_advantage'] = 2.5
        elif stock.market_cap >= 1000000:  # 1Ï°∞Ïõê Ïù¥ÏÉÅ
            scores['competitive_advantage'] = 2.0
        else:
            scores['competitive_advantage'] = 1.0
        
        # 3. Ìï©Î¶¨Ï†Å Í∞ÄÍ≤© - 3Ï†ê
        if stock.per > 0 and stock.per <= 15 and stock.pbr <= 2:
            scores['valuation'] = 3.0
        elif stock.per > 0 and stock.per <= 20 and stock.pbr <= 3:
            scores['valuation'] = 2.0
        else:
            scores['valuation'] = 1.0
        
        total_score = sum(scores.values())
        grade = self.get_grade(total_score)
        recommendation = self.get_recommendation(grade, stock)
        
        return InvestmentScore(
            total_score=round(total_score, 2),
            grade=grade,
            recommendation=recommendation,
            details=scores
        )


class GreenblattStrategy(InvestmentStrategy):
    """Ï°∞Ïóò Í∑∏Î¶∞Î∏îÎùºÌä∏ ÎßàÎ≤ïÍ≥µÏãù Ï†ÑÎûµ"""
    
    def __init__(self):
        super().__init__(
            name="Ï°∞Ïóò Í∑∏Î¶∞Î∏îÎùºÌä∏",
            description="ÏûêÎ≥∏ÏàòÏùµÎ•†(ROA) + Ïù¥ÏùµÏàòÏùµÎ•†(1/PER)",
            icon="ü™Ñ"
        )
    
    def calculate_score(self, stock: Stock) -> InvestmentScore:
        scores = {}
        
        # 1. ÏûêÎ≥∏ÏàòÏùµÎ•† (ROA) - 5Ï†ê
        if stock.roa >= 20:
            scores['capital_return'] = 5.0
        elif stock.roa >= 15:
            scores['capital_return'] = 4.0
        elif stock.roa >= 10:
            scores['capital_return'] = 3.0
        elif stock.roa >= 7:
            scores['capital_return'] = 2.0
        else:
            scores['capital_return'] = 1.0
        
        # 2. Ïù¥ÏùµÏàòÏùµÎ•† (1/PER) - 5Ï†ê
        if stock.per > 0:
            earnings_yield = 100 / stock.per
            if earnings_yield >= 15:  # PER 6.67 Ïù¥Ìïò
                scores['earnings_yield'] = 5.0
            elif earnings_yield >= 10:  # PER 10 Ïù¥Ìïò
                scores['earnings_yield'] = 4.0
            elif earnings_yield >= 7:  # PER 14.3 Ïù¥Ìïò
                scores['earnings_yield'] = 3.0
            elif earnings_yield >= 5:  # PER 20 Ïù¥Ìïò
                scores['earnings_yield'] = 2.0
            else:
                scores['earnings_yield'] = 1.0
        else:
            scores['earnings_yield'] = 1.0
        
        total_score = sum(scores.values())
        grade = self.get_grade(total_score)
        recommendation = self.get_recommendation(grade, stock)
        
        return InvestmentScore(
            total_score=round(total_score, 2),
            grade=grade,
            recommendation=recommendation,
            details=scores
        )


# Ï†ÑÎûµ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
INVESTMENT_STRATEGIES = {
    'buffett': BuffettStrategy(),
    'lynch': LynchStrategy(),
    'graham': GrahamStrategy(),
    'fisher': FisherStrategy(),
    'munger': MungerStrategy(),
    'greenblatt': GreenblattStrategy()
}