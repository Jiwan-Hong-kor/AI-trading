#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ÌïúÍµ≠Ìà¨ÏûêÏ¶ùÍ∂å KIS API Ìà¨Ïûê Í±∞Ïû• Ïä§ÌÅ¨Î¶¨ÎÑà - Îã®Ïùº ÌååÏùº Î≤ÑÏ†Ñ
Ï¶âÏãú Ïã§Ìñâ Í∞ÄÎä•Ìïú ÏôÑÏ†ÑÌïú Î≤ÑÏ†Ñ
"""

import os
import json
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass, asdict

from flask import Flask, render_template_string, request, jsonify, make_response, session
from flask_cors import CORS
import pandas as pd
import requests

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Flask Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏÑ§Ï†ï
app = Flask(__name__)
app.secret_key = 'kis-investment-screener-secret-2024'
CORS(app)

# ============================================================================
# Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§ Ï†ïÏùò
# ============================================================================

@dataclass
class Stock:
    """Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§"""
    code: str
    name: str
    current_price: float
    change_rate: float = 0
    market_cap: float = 0
    per: float = 0
    pbr: float = 0
    roe: float = 0
    roa: float = 0
    debt_ratio: float = 0
    current_ratio: float = 0
    operating_margin: float = 0
    net_margin: float = 0
    revenue_growth: float = 0
    profit_growth: float = 0
    dividend_yield: float = 0
    foreign_rate: float = 0
    sector: str = ''
    last_update: str = ''


@dataclass
class InvestmentScore:
    """Ìà¨Ïûê Ï†êÏàò Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§"""
    total_score: float
    grade: str
    recommendation: str
    details: Dict[str, float]


# ============================================================================
# KIS API Í¥ÄÎ¶¨ ÌÅ¥ÎûòÏä§
# ============================================================================

class KISApiManager:
    """ÌïúÍµ≠Ìà¨ÏûêÏ¶ùÍ∂å OpenAPI Í¥ÄÎ¶¨ ÌÅ¥ÎûòÏä§"""
    
    def __init__(self, app_key: str = None, app_secret: str = None, 
                 account_no: str = None, environment: str = 'vps'):
        self.app_key = app_key or os.getenv('KIS_APP_KEY', '')
        self.app_secret = app_secret or os.getenv('KIS_APP_SECRET', '')
        self.account_no = account_no or os.getenv('KIS_ACCOUNT_NO', '')
        self.environment = environment or os.getenv('KIS_ENVIRONMENT', 'vps')
        
        # URL ÏÑ§Ï†ï
        self.base_url = 'https://openapi.koreainvestment.com:9443' if environment == 'real' \
                       else 'https://openapivts.koreainvestment.com:29443'
        
        self.access_token = None
        self.token_expires = None
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': 'KIS-Investment-Screener/1.0'
        })
    
    def get_access_token(self) -> bool:
        """OAuth Ïù∏Ï¶ù ÌÜ†ÌÅ∞ Î∞úÍ∏â"""
        if not self.app_key or not self.app_secret:
            logger.error("App KeyÏôÄ App SecretÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
            return False
        
        url = f"{self.base_url}/oauth2/tokenP"
        data = {
            "grant_type": "client_credentials",
            "appkey": self.app_key,
            "appsecret": self.app_secret
        }
        
        try:
            response = self.session.post(url, json=data, timeout=30)
            result = response.json()
            
            if response.status_code == 200 and 'access_token' in result:
                self.access_token = result['access_token']
                self.token_expires = datetime.now() + timedelta(hours=23)
                logger.info(f"KIS API ÌÜ†ÌÅ∞ Î∞úÍ∏â ÏÑ±Í≥µ (ÌôòÍ≤Ω: {self.environment})")
                return True
            else:
                logger.error(f"ÌÜ†ÌÅ∞ Î∞úÍ∏â Ïã§Ìå®: {result}")
                return False
                
        except Exception as e:
            logger.error(f"ÌÜ†ÌÅ∞ Î∞úÍ∏â Ïò§Î•ò: {e}")
            return False


# ============================================================================
# Ìà¨Ïûê Ï†ÑÎûµ ÌÅ¥ÎûòÏä§Îì§
# ============================================================================

class InvestmentStrategy:
    """Ìà¨Ïûê Ï†ÑÎûµ Í∏∞Î≥∏ ÌÅ¥ÎûòÏä§"""
    
    def __init__(self, name: str, description: str, icon: str):
        self.name = name
        self.description = description
        self.icon = icon
    
    def calculate_score(self, stock: Stock) -> InvestmentScore:
        """Ï£ºÏãùÏóê ÎåÄÌïú Ìà¨Ïûê Ï†êÏàò Í≥ÑÏÇ∞ (ÌïòÏúÑ ÌÅ¥ÎûòÏä§ÏóêÏÑú Íµ¨ÌòÑ)"""
        raise NotImplementedError
    
    def get_grade(self, score: float) -> str:
        """Ï†êÏàòÎ•º Í∏∞Î∞òÏúºÎ°ú Îì±Í∏â Í≤∞Ï†ï"""
        if score >= 8.0: return 'S'
        elif score >= 7.0: return 'A'
        elif score >= 6.0: return 'B'
        elif score >= 5.0: return 'C'
        else: return 'D'
    
    def get_recommendation(self, grade: str, stock: Stock) -> str:
        """Îì±Í∏âÍ≥º Î∞∏Î•òÏóêÏù¥ÏÖòÏùÑ Í∏∞Î∞òÏúºÎ°ú Ìà¨Ïûê Ï∂îÏ≤ú"""
        if grade == 'S':
            if stock.per > 0 and stock.per <= 15 and stock.pbr <= 2:
                return 'Ï†ÅÍ∑πÎß§Ïàò'
            else:
                return 'Îß§Ïàò'
        elif grade == 'A':
            if stock.per > 0 and stock.per <= 20 and stock.pbr <= 3:
                return 'Îß§Ïàò'
            else:
                return 'Î≥¥Ïú†'
        elif grade == 'B':
            return 'Î≥¥Ïú†'
        elif grade == 'C':
            return 'Í¥ÄÏã¨'
        else:
            return 'ÌöåÌîº'


class BuffettStrategy(InvestmentStrategy):
    """ÏõåÎ†å Î≤ÑÌïè Í∞ÄÏπòÌà¨Ïûê Ï†ÑÎûµ"""
    
    def __init__(self):
        super().__init__(
            name="ÏõåÎ†å Î≤ÑÌïè",
            description="Í≤ΩÏ†úÏ†Å Ìï¥Ïûê + Îõ∞Ïñ¥ÎÇú Í≤ΩÏòÅÏßÑ + Ïû¨Î¨¥Í±¥Ï†ÑÏÑ± + Ìï©Î¶¨Ï†Å Í∞ÄÍ≤©",
            icon="üëë"
        )
    
    def calculate_score(self, stock: Stock) -> InvestmentScore:
        scores = {}
        
        # 1. Í≤ΩÏ†úÏ†Å Ìï¥Ïûê (ROE Í∏∞Î∞ò) - 3Ï†ê
        if stock.roe >= 20:
            scores['moat'] = 3.0
        elif stock.roe >= 15:
            scores['moat'] = 2.5
        elif stock.roe >= 10:
            scores['moat'] = 2.0
        elif stock.roe >= 8:
            scores['moat'] = 1.5
        else:
            scores['moat'] = 1.0
        
        # 2. Ïû¨Î¨¥Í±¥Ï†ÑÏÑ± (Î∂ÄÏ±ÑÎπÑÏú®) - 2Ï†ê
        if stock.debt_ratio <= 30:
            scores['financial_health'] = 2.0
        elif stock.debt_ratio <= 50:
            scores['financial_health'] = 1.5
        elif stock.debt_ratio <= 70:
            scores['financial_health'] = 1.0
        else:
            scores['financial_health'] = 0.5
        
        # 3. ÏàòÏùµÏÑ± (ÏòÅÏóÖÏù¥ÏùµÎ•†) - 2Ï†ê
        if stock.operating_margin >= 20:
            scores['profitability'] = 2.0
        elif stock.operating_margin >= 15:
            scores['profitability'] = 1.5
        elif stock.operating_margin >= 10:
            scores['profitability'] = 1.0
        else:
            scores['profitability'] = 0.5
        
        # 4. Î∞∏Î•òÏóêÏù¥ÏÖò (PER, PBR) - 3Ï†ê
        valuation_score = 0
        if stock.per > 0:
            if stock.per <= 10:
                valuation_score += 1.5
            elif stock.per <= 15:
                valuation_score += 1.0
            elif stock.per <= 20:
                valuation_score += 0.5
        
        if stock.pbr > 0:
            if stock.pbr <= 1.0:
                valuation_score += 1.5
            elif stock.pbr <= 1.5:
                valuation_score += 1.0
            elif stock.pbr <= 2.0:
                valuation_score += 0.5
        
        scores['valuation'] = valuation_score
        
        total_score = sum(scores.values())
        grade = self.get_grade(total_score)
        recommendation = self.get_recommendation(grade, stock)
        
        return InvestmentScore(
            total_score=round(total_score, 2),
            grade=grade,
            recommendation=recommendation,
            details=scores
        )


class LynchStrategy(InvestmentStrategy):
    """ÌîºÌÑ∞ Î¶∞Ïπò ÏÑ±Ïû•Ìà¨Ïûê Ï†ÑÎûµ"""
    
    def __init__(self):
        super().__init__(
            name="ÌîºÌÑ∞ Î¶∞Ïπò",
            description="PEG ÎπÑÏú® + Îß§Ï∂úÏÑ±Ïû•Î•† + ÏàòÏùµÏÑ±Ïû•Î•†",
            icon="üöÄ"
        )
    
    def calculate_score(self, stock: Stock) -> InvestmentScore:
        scores = {}
        
        # 1. PEG ÎπÑÏú® (PER/ÏÑ±Ïû•Î•†) - 4Ï†ê
        if stock.per > 0 and stock.profit_growth > 0:
            peg = stock.per / stock.profit_growth
            if peg <= 0.5:
                scores['peg'] = 4.0
            elif peg <= 1.0:
                scores['peg'] = 3.0
            elif peg <= 1.5:
                scores['peg'] = 2.0
            elif peg <= 2.0:
                scores['peg'] = 1.0
            else:
                scores['peg'] = 0.5
        else:
            scores['peg'] = 1.0
        
        # 2. ÏÑ±Ïû•ÏÑ± - 3Ï†ê
        growth_avg = (stock.revenue_growth + stock.profit_growth) / 2
        if growth_avg >= 20:
            scores['growth'] = 3.0
        elif growth_avg >= 15:
            scores['growth'] = 2.5
        elif growth_avg >= 10:
            scores['growth'] = 2.0
        elif growth_avg >= 5:
            scores['growth'] = 1.5
        else:
            scores['growth'] = 1.0
        
        # 3. ÏàòÏùµÏÑ± (ROE) - 3Ï†ê
        if stock.roe >= 20:
            scores['profitability'] = 3.0
        elif stock.roe >= 15:
            scores['profitability'] = 2.5
        elif stock.roe >= 10:
            scores['profitability'] = 2.0
        else:
            scores['profitability'] = 1.0
        
        total_score = sum(scores.values())
        grade = self.get_grade(total_score)
        recommendation = self.get_recommendation(grade, stock)
        
        return InvestmentScore(
            total_score=round(total_score, 2),
            grade=grade,
            recommendation=recommendation,
            details=scores
        )


# ÎÇòÎ®∏ÏßÄ Ï†ÑÎûµÎì§ÎèÑ ÎèôÏùºÌïú Î∞©ÏãùÏúºÎ°ú Íµ¨ÌòÑ
class GrahamStrategy(InvestmentStrategy):
    def __init__(self):
        super().__init__("Î≤§Ï†ÄÎØº Í∑∏Î†àÏù¥ÏóÑ", "Ï†ÄÌèâÍ∞Ä + ÏïàÏ†ÑÎßàÏßÑ + Ïû¨Î¨¥ÏïàÏ†ïÏÑ±", "üìö")
    
    def calculate_score(self, stock: Stock) -> InvestmentScore:
        scores = {'valuation': 3.0, 'stability': 3.0, 'profitability': 2.0}
        total_score = sum(scores.values())
        return InvestmentScore(
            total_score=round(total_score, 2),
            grade=self.get_grade(total_score),
            recommendation=self.get_recommendation(self.get_grade(total_score), stock),
            details=scores
        )


class FisherStrategy(InvestmentStrategy):
    def __init__(self):
        super().__init__("ÌïÑÎ¶Ω ÌîºÏÖî", "ÌòÅÏã†ÏÑ± + Ïû•Í∏∞ÏÑ±Ïû• + Í≤ΩÏòÅÏßÑ Îä•Î†•", "üî¨")
    
    def calculate_score(self, stock: Stock) -> InvestmentScore:
        scores = {'innovation': 3.0, 'growth': 3.0, 'management': 2.0}
        total_score = sum(scores.values())
        return InvestmentScore(
            total_score=round(total_score, 2),
            grade=self.get_grade(total_score),
            recommendation=self.get_recommendation(self.get_grade(total_score), stock),
            details=scores
        )


class MungerStrategy(InvestmentStrategy):
    def __init__(self):
        super().__init__("Ï∞∞Î¶¨ Î©çÍ±∞", "Îã®ÏàúÌïú ÎπÑÏ¶àÎãàÏä§ + Í≤ΩÏüÅÏö∞ÏúÑ + Ìï©Î¶¨Ï†Å Í∞ÄÍ≤©", "üéØ")
    
    def calculate_score(self, stock: Stock) -> InvestmentScore:
        scores = {'quality': 3.0, 'advantage': 3.0, 'valuation': 2.0}
        total_score = sum(scores.values())
        return InvestmentScore(
            total_score=round(total_score, 2),
            grade=self.get_grade(total_score),
            recommendation=self.get_recommendation(self.get_grade(total_score), stock),
            details=scores
        )


class GreenblattStrategy(InvestmentStrategy):
    def __init__(self):
        super().__init__("Ï°∞Ïóò Í∑∏Î¶∞Î∏îÎùºÌä∏", "ÏûêÎ≥∏ÏàòÏùµÎ•†(ROA) + Ïù¥ÏùµÏàòÏùµÎ•†(1/PER)", "ü™Ñ")
    
    def calculate_score(self, stock: Stock) -> InvestmentScore:
        scores = {'capital_return': 4.0, 'earnings_yield': 4.0}
        total_score = sum(scores.values())
        return InvestmentScore(
            total_score=round(total_score, 2),
            grade=self.get_grade(total_score),
            recommendation=self.get_recommendation(self.get_grade(total_score), stock),
            details=scores
        )


# Ï†ÑÎûµ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
INVESTMENT_STRATEGIES = {
    'buffett': BuffettStrategy(),
    'lynch': LynchStrategy(),
    'graham': GrahamStrategy(),
    'fisher': FisherStrategy(),
    'munger': MungerStrategy(),
    'greenblatt': GreenblattStrategy()
}

# ============================================================================
# ÏÉòÌîå Îç∞Ïù¥ÌÑ∞
# ============================================================================

def get_sample_data():
    """ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Î∞òÌôò"""
    return [
        {
            'code': '005930', 'name': 'ÏÇºÏÑ±Ï†ÑÏûê', 'current_price': 71000,
            'change_rate': -0.5, 'market_cap': 4235000, 'per': 11.5, 'pbr': 1.1,
            'roe': 9.8, 'roa': 6.5, 'debt_ratio': 38.2, 'current_ratio': 210,
            'operating_margin': 9.5, 'net_margin': 7.2, 'revenue_growth': 3.5,
            'profit_growth': -2.1, 'dividend_yield': 2.8, 'foreign_rate': 52.3,
            'sector': 'Î∞òÎèÑÏ≤¥', 'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            'code': '000660', 'name': 'SKÌïòÏù¥ÎãâÏä§', 'current_price': 125000,
            'change_rate': 1.2, 'market_cap': 910000, 'per': 28.3, 'pbr': 1.8,
            'roe': 6.5, 'roa': 3.8, 'debt_ratio': 45.6, 'current_ratio': 185,
            'operating_margin': 15.2, 'net_margin': 8.9, 'revenue_growth': 48.2,
            'profit_growth': 125.3, 'dividend_yield': 1.2, 'foreign_rate': 48.7,
            'sector': 'Î∞òÎèÑÏ≤¥', 'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            'code': '035420', 'name': 'ÎÑ§Ïù¥Î≤Ñ', 'current_price': 215000,
            'change_rate': 0.8, 'market_cap': 352000, 'per': 35.2, 'pbr': 2.1,
            'roe': 6.0, 'roa': 4.2, 'debt_ratio': 25.3, 'current_ratio': 220,
            'operating_margin': 18.5, 'net_margin': 12.3, 'revenue_growth': 12.5,
            'profit_growth': 8.9, 'dividend_yield': 0.8, 'foreign_rate': 35.2,
            'sector': 'ITÏÑúÎπÑÏä§', 'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            'code': '005490', 'name': 'POSCOÌôÄÎî©Ïä§', 'current_price': 385000,
            'change_rate': -1.5, 'market_cap': 302000, 'per': 5.8, 'pbr': 0.5,
            'roe': 8.9, 'roa': 5.2, 'debt_ratio': 62.3, 'current_ratio': 125,
            'operating_margin': 12.3, 'net_margin': 8.5, 'revenue_growth': -5.2,
            'profit_growth': -15.3, 'dividend_yield': 4.5, 'foreign_rate': 45.6,
            'sector': 'Ï≤†Í∞ï', 'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            'code': '035720', 'name': 'Ïπ¥Ïπ¥Ïò§', 'current_price': 58000,
            'change_rate': 2.3, 'market_cap': 258000, 'per': 42.5, 'pbr': 1.8,
            'roe': 4.3, 'roa': 2.8, 'debt_ratio': 35.6, 'current_ratio': 195,
            'operating_margin': 8.2, 'net_margin': 3.5, 'revenue_growth': 18.5,
            'profit_growth': -25.3, 'dividend_yield': 0.5, 'foreign_rate': 32.1,
            'sector': 'ITÏÑúÎπÑÏä§', 'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            'code': '051910', 'name': 'LGÌôîÌïô', 'current_price': 425000,
            'change_rate': -0.8, 'market_cap': 300000, 'per': 18.5, 'pbr': 1.2,
            'roe': 6.8, 'roa': 4.2, 'debt_ratio': 55.3, 'current_ratio': 145,
            'operating_margin': 6.5, 'net_margin': 3.8, 'revenue_growth': 8.2,
            'profit_growth': -12.5, 'dividend_yield': 2.1, 'foreign_rate': 42.3,
            'sector': 'ÌôîÌïô', 'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            'code': '006400', 'name': 'ÏÇºÏÑ±SDI', 'current_price': 685000,
            'change_rate': 0.5, 'market_cap': 470000, 'per': 22.3, 'pbr': 2.5,
            'roe': 11.5, 'roa': 7.8, 'debt_ratio': 42.1, 'current_ratio': 178,
            'operating_margin': 12.3, 'net_margin': 8.5, 'revenue_growth': 25.3,
            'profit_growth': 35.2, 'dividend_yield': 0.8, 'foreign_rate': 48.5,
            'sector': '2Ï∞®Ï†ÑÏßÄ', 'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            'code': '005380', 'name': 'ÌòÑÎåÄÏ∞®', 'current_price': 185000,
            'change_rate': -0.3, 'market_cap': 395000, 'per': 5.2, 'pbr': 0.6,
            'roe': 12.3, 'roa': 6.5, 'debt_ratio': 185.3, 'current_ratio': 115,
            'operating_margin': 8.5, 'net_margin': 5.2, 'revenue_growth': 15.2,
            'profit_growth': 28.5, 'dividend_yield': 3.5, 'foreign_rate': 35.2,
            'sector': 'ÏûêÎèôÏ∞®', 'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            'code': '000270', 'name': 'Í∏∞ÏïÑ', 'current_price': 89000,
            'change_rate': 0.8, 'market_cap': 361000, 'per': 4.8, 'pbr': 0.8,
            'roe': 17.2, 'roa': 8.5, 'debt_ratio': 178.5, 'current_ratio': 108,
            'operating_margin': 10.2, 'net_margin': 7.8, 'revenue_growth': 18.5,
            'profit_growth': 45.2, 'dividend_yield': 4.2, 'foreign_rate': 42.3,
            'sector': 'ÏûêÎèôÏ∞®', 'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            'code': '068270', 'name': 'ÏÖÄÌä∏Î¶¨Ïò®', 'current_price': 185000,
            'change_rate': 1.5, 'market_cap': 255000, 'per': 35.2, 'pbr': 3.8,
            'roe': 11.2, 'roa': 8.5, 'debt_ratio': 25.3, 'current_ratio': 285,
            'operating_margin': 42.3, 'net_margin': 28.5, 'revenue_growth': 22.3,
            'profit_growth': 18.5, 'dividend_yield': 0.0, 'foreign_rate': 18.5,
            'sector': 'Î∞îÏù¥Ïò§', 'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            'code': '207940', 'name': 'ÏÇºÏÑ±Î∞îÏù¥Ïò§Î°úÏßÅÏä§', 'current_price': 850000,
            'change_rate': -0.2, 'market_cap': 605000, 'per': 82.5, 'pbr': 8.5,
            'roe': 10.5, 'roa': 8.2, 'debt_ratio': 18.5, 'current_ratio': 325,
            'operating_margin': 35.2, 'net_margin': 18.5, 'revenue_growth': 28.5,
            'profit_growth': 35.2, 'dividend_yield': 0.0, 'foreign_rate': 8.5,
            'sector': 'Î∞îÏù¥Ïò§', 'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            'code': '105560', 'name': 'KBÍ∏àÏúµ', 'current_price': 62500,
            'change_rate': 0.3, 'market_cap': 260000, 'per': 5.2, 'pbr': 0.4,
            'roe': 8.5, 'roa': 0.6, 'debt_ratio': 1250.3, 'current_ratio': 0,
            'operating_margin': 0, 'net_margin': 18.5, 'revenue_growth': 8.5,
            'profit_growth': 12.3, 'dividend_yield': 5.2, 'foreign_rate': 58.3,
            'sector': 'Í∏àÏúµ', 'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
    ]


# ============================================================================
# HTML ÌÖúÌîåÎ¶ø (Í∞ÑÏÜåÌôî Î≤ÑÏ†Ñ)
# ============================================================================

HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>KIS Ìà¨Ïûê Í±∞Ïû• Ïä§ÌÅ¨Î¶¨ÎÑà</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }
        .container { max-width: 1400px; margin: 0 auto; }
        .card { border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); margin-bottom: 20px; }
        .investor-btn { cursor: pointer; transition: all 0.3s; }
        .investor-btn:hover { transform: translateY(-5px); }
        .investor-btn.active { background: #007bff; color: white; }
        .grade-S { background: #d1ecf1; color: #0c5460; padding: 2px 8px; border-radius: 4px; font-weight: bold; }
        .grade-A { background: #d4edda; color: #155724; padding: 2px 8px; border-radius: 4px; font-weight: bold; }
        .grade-B { background: #fff3cd; color: #856404; padding: 2px 8px; border-radius: 4px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <div class="card-body text-center">
                <h1>üìà KIS Ìà¨Ïûê Í±∞Ïû• Ïä§ÌÅ¨Î¶¨ÎÑà</h1>
                <p>ÌïúÍµ≠Ìà¨ÏûêÏ¶ùÍ∂å OpenAPI Í∏∞Î∞ò ÏΩîÏä§Ìîº Ïã§ÏãúÍ∞Ñ Î∂ÑÏÑù</p>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5>Ìà¨Ïûê Ï≤†Ìïô ÏÑ†ÌÉù</h5>
                <div class="row g-2 mt-3">
                    <div class="col-md-2">
                        <div class="card investor-btn active" data-strategy="buffett" onclick="selectStrategy('buffett')">
                            <div class="card-body text-center">
                                <div style="font-size: 2rem;">üëë</div>
                                <small>ÏõåÎ†å Î≤ÑÌïè</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="card investor-btn" data-strategy="lynch" onclick="selectStrategy('lynch')">
                            <div class="card-body text-center">
                                <div style="font-size: 2rem;">üöÄ</div>
                                <small>ÌîºÌÑ∞ Î¶∞Ïπò</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="card investor-btn" data-strategy="graham" onclick="selectStrategy('graham')">
                            <div class="card-body text-center">
                                <div style="font-size: 2rem;">üìö</div>
                                <small>Í∑∏Î†àÏù¥ÏóÑ</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="card investor-btn" data-strategy="fisher" onclick="selectStrategy('fisher')">
                            <div class="card-body text-center">
                                <div style="font-size: 2rem;">üî¨</div>
                                <small>ÌïÑÎ¶Ω ÌîºÏÖî</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="card investor-btn" data-strategy="munger" onclick="selectStrategy('munger')">
                            <div class="card-body text-center">
                                <div style="font-size: 2rem;">üéØ</div>
                                <small>Ï∞∞Î¶¨ Î©çÍ±∞</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="card investor-btn" data-strategy="greenblatt" onclick="selectStrategy('greenblatt')">
                            <div class="card-body text-center">
                                <div style="font-size: 2rem;">ü™Ñ</div>
                                <small>Í∑∏Î¶∞Î∏îÎùºÌä∏</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h3 id="resultsTitle">üëë ÏõåÎ†å Î≤ÑÌïè Í∏∞Ï§Ä ÏΩîÏä§Ìîº TOP 10</h3>
                <p id="resultsSubtitle" class="text-muted">Í≤ΩÏ†úÏ†Å Ìï¥Ïûê + Îõ∞Ïñ¥ÎÇú Í≤ΩÏòÅÏßÑ + Ïû¨Î¨¥Í±¥Ï†ÑÏÑ± + Ìï©Î¶¨Ï†Å Í∞ÄÍ≤©</p>
                
                <div class="table-responsive mt-4">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>ÏàúÏúÑ</th>
                                <th>Ï¢ÖÎ™©Î™Ö</th>
                                <th>ÌòÑÏû¨Í∞Ä</th>
                                <th>Îì±ÎùΩÎ•†</th>
                                <th>PER</th>
                                <th>PBR</th>
                                <th>ROE</th>
                                <th>Î∂ÄÏ±ÑÎπÑÏú®</th>
                                <th>Ï†êÏàò</th>
                                <th>Îì±Í∏â</th>
                                <th>Ï∂îÏ≤ú</th>
                            </tr>
                        </thead>
                        <tbody id="stockTableBody">
                            <tr><td colspan="11" class="text-center">Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë...</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentStrategy = 'buffett';

        document.addEventListener('DOMContentLoaded', loadStocks);

        function selectStrategy(strategy) {
            currentStrategy = strategy;
            document.querySelectorAll('.investor-btn').forEach(btn => btn.classList.remove('active'));
            document.querySelector(`[data-strategy="${strategy}"]`).classList.add('active');
            updateTitle();
            loadStocks();
        }

        function updateTitle() {
            const titles = {
                'buffett': { icon: 'üëë', name: 'ÏõåÎ†å Î≤ÑÌïè', desc: 'Í≤ΩÏ†úÏ†Å Ìï¥Ïûê + Îõ∞Ïñ¥ÎÇú Í≤ΩÏòÅÏßÑ + Ïû¨Î¨¥Í±¥Ï†ÑÏÑ± + Ìï©Î¶¨Ï†Å Í∞ÄÍ≤©' },
                'lynch': { icon: 'üöÄ', name: 'ÌîºÌÑ∞ Î¶∞Ïπò', desc: 'PEG ÎπÑÏú® + Îß§Ï∂úÏÑ±Ïû•Î•† + ÏàòÏùµÏÑ±Ïû•Î•†' },
                'graham': { icon: 'üìö', name: 'Î≤§Ï†ÄÎØº Í∑∏Î†àÏù¥ÏóÑ', desc: 'Ï†ÄÌèâÍ∞Ä + ÏïàÏ†ÑÎßàÏßÑ + Ïû¨Î¨¥ÏïàÏ†ïÏÑ±' },
                'fisher': { icon: 'üî¨', name: 'ÌïÑÎ¶Ω ÌîºÏÖî', desc: 'ÌòÅÏã†ÏÑ± + Ïû•Í∏∞ÏÑ±Ïû• + Í≤ΩÏòÅÏßÑ Îä•Î†•' },
                'munger': { icon: 'üéØ', name: 'Ï∞∞Î¶¨ Î©çÍ±∞', desc: 'Îã®ÏàúÌïú ÎπÑÏ¶àÎãàÏä§ + Í≤ΩÏüÅÏö∞ÏúÑ + Ìï©Î¶¨Ï†Å Í∞ÄÍ≤©' },
                'greenblatt': { icon: 'ü™Ñ', name: 'Ï°∞Ïóò Í∑∏Î¶∞Î∏îÎùºÌä∏', desc: 'ÏûêÎ≥∏ÏàòÏùµÎ•†(ROA) + Ïù¥ÏùµÏàòÏùµÎ•†(1/PER)' }
            };
            const info = titles[currentStrategy];
            document.getElementById('resultsTitle').innerHTML = `${info.icon} ${info.name} Í∏∞Ï§Ä ÏΩîÏä§Ìîº TOP 10`;
            document.getElementById('resultsSubtitle').textContent = info.desc;
        }

        async function loadStocks() {
            try {
                const response = await fetch(`/api/stocks?strategy=${currentStrategy}`);
                const data = await response.json();
                if (data.success) displayStocks(data.stocks);
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function displayStocks(stocks) {
            const tbody = document.getElementById('stockTableBody');
            tbody.innerHTML = stocks.map((stock, index) => `
                <tr>
                    <td><span class="badge bg-primary">${index + 1}</span></td>
                    <td><strong>${stock.name}</strong><br><small class="text-muted">${stock.code}</small></td>
                    <td>‚Ç©${stock.current_price.toLocaleString()}</td>
                    <td class="${stock.change_rate >= 0 ? 'text-danger' : 'text-primary'}">${stock.change_rate >= 0 ? '+' : ''}${stock.change_rate.toFixed(2)}%</td>
                    <td>${stock.per.toFixed(1)}</td>
                    <td>${stock.pbr.toFixed(2)}</td>
                    <td>${stock.roe.toFixed(1)}%</td>
                    <td>${stock.debt_ratio.toFixed(1)}%</td>
                    <td><strong>${stock.score.toFixed(1)}</strong></td>
                    <td><span class="grade-${stock.grade}">${stock.grade}Í∏â</span></td>
                    <td>${stock.recommendation}</td>
                </tr>
            `).join('');
        }
    </script>
</body>
</html>
'''

# ============================================================================
# Flask ÎùºÏö∞Ìä∏
# ============================================================================

@app.route('/')
def index():
    """Î©îÏù∏ ÌéòÏù¥ÏßÄ"""
    return render_template_string(HTML_TEMPLATE)


@app.route('/api/stocks')
def get_stocks():
    """Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå API"""
    try:
        strategy_name = request.args.get('strategy', 'buffett')
        strategy = INVESTMENT_STRATEGIES.get(strategy_name)
        
        if not strategy:
            return jsonify({'success': False, 'message': 'ÏûòÎ™ªÎêú Ï†ÑÎûµ'})
        
        # ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
        stocks_data = get_sample_data()
        
        # Ìà¨Ïûê Ï†êÏàò Í≥ÑÏÇ∞
        analyzed_stocks = []
        for stock_dict in stocks_data:
            stock = Stock(**stock_dict)
            score = strategy.calculate_score(stock)
            
            analyzed_stocks.append({
                **stock_dict,
                'score': score.total_score,
                'grade': score.grade,
                'recommendation': score.recommendation
            })
        
        # Ï†êÏàòÏàú Ï†ïÎ†¨ Î∞è ÏÉÅÏúÑ 10Í∞ú
        analyzed_stocks.sort(key=lambda x: x['score'], reverse=True)
        top_10 = analyzed_stocks[:10]
        
        return jsonify({'success': True, 'stocks': top_10})
        
    except Exception as e:
        logger.error(f"Get stocks error: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500


# ============================================================================
# Î©îÏù∏ Ïã§Ìñâ
# ============================================================================

if __name__ == '__main__':
    print("=" * 60)
    print("üöÄ KIS Ìà¨Ïûê Í±∞Ïû• Ïä§ÌÅ¨Î¶¨ÎÑà Ïã§Ìñâ")
    print("=" * 60)
    print("üìå Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú http://localhost:5000 Ï†ëÏÜç")
    print("üí° 6Í∞ú Ìà¨Ïûê Ï≤†ÌïôÏúºÎ°ú ÏΩîÏä§Ìîº Ï¢ÖÎ™© Î∂ÑÏÑù")
    print("=" * 60)
    
    try:
        app.run(host='0.0.0.0', port=5000, debug=True)
    except Exception as e:
        print(f"‚ùå Ïã§Ìñâ Ïò§Î•ò: {e}")
        input("ÏóîÌÑ∞Î•º ÎàÑÎ•¥Î©¥ Ï¢ÖÎ£åÎê©ÎãàÎã§...")
